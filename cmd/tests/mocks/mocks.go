// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thiagosantosleite/postgres_exporter/cmd/tests (interfaces: ServerAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockServerAPI is a mock of ServerAPI interface
type MockServerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServerAPIMockRecorder
}

// MockServerAPIMockRecorder is the mock recorder for MockServerAPI
type MockServerAPIMockRecorder struct {
	mock *MockServerAPI
}

// NewMockServerAPI creates a new mock instance
func NewMockServerAPI(ctrl *gomock.Controller) *MockServerAPI {
	mock := &MockServerAPI{ctrl: ctrl}
	mock.recorder = &MockServerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerAPI) EXPECT() *MockServerAPIMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockServerAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockServerAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServerAPI)(nil).Close))
}

// Query mocks base method
func (m *MockServerAPI) Query(arg0 string) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockServerAPIMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockServerAPI)(nil).Query), arg0)
}

// Scrape mocks base method
func (m *MockServerAPI) Scrape(arg0 chan<- prometheus.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scrape indicates an expected call of Scrape
func (mr *MockServerAPIMockRecorder) Scrape(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockServerAPI)(nil).Scrape), arg0)
}
